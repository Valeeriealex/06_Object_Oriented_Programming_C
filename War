using System;
using System.Collections.Generic;
using System.Threading;

namespace Tasks_IJunior_02._06_OOP
{
    internal class War
    {
        public static void Main(string[] args)
        {
            Battle battle = new Battle();
            battle.WagingBattle();
        }
    }

    public class Battle
    {
        private Army _elvesArmy = new Army("Армия эльфов");
        private Army _orcsArmy = new Army("Армия орков");

        public void WagingBattle()
        {
            ShowState();
            Fight();
            DetermineWinner();
        }

        private void Fight()
        {
            Console.WriteLine("Началось сражение!");
            Thread.Sleep(2000);

            while (_elvesArmy.HasFighters() && _orcsArmy.HasFighters())
            {
                _elvesArmy.Attack(_orcsArmy.GetFighters());
                _orcsArmy.RemoveDead();

                if (_orcsArmy.HasFighters())
                {
                    Console.WriteLine($"\nАтакует {_orcsArmy.Name}");
                    Thread.Sleep(2000);
                    _orcsArmy.Attack(_elvesArmy.GetFighters());
                    _elvesArmy.RemoveDead();
                }

                ShowState();
            }
        }

        private void DetermineWinner()
        {
            if (_elvesArmy.HasFighters() == false && _orcsArmy.HasFighters() == false)
            {
                Console.WriteLine("Ничья!");
            }
            else if (_elvesArmy.HasFighters())
            {
                Console.WriteLine($"Победила армия эльфов!");
            }
            else
            {
                Console.WriteLine($"Победила армия орков!");
            }
        }

        private void ShowState()
        {
            Console.WriteLine($"\nКоличество бойцов эльфов: {_elvesArmy.GetFighters().Count}");
            Console.WriteLine($"Количество бойцов орков: {_orcsArmy.GetFighters().Count}\n");
        }
    }

    public class Army
    {
        private List<Fighter> _fighters;
        private List<Fighter> _fighterTypes;

        public Army(string name)
        {
            Name = name;
            _fighters = new List<Fighter>();
            InitializeFighterTypes();
            FillArmy();
        }

        public string Name { get; private set; }

        public List<Fighter> GetFighters() => new List<Fighter>(_fighters);

        public void Attack(List<Fighter> fighters)
        {
            foreach (Fighter fighter in _fighters)
            {
                Console.WriteLine($"\n{fighter.Name} атакует");
                Thread.Sleep(2000);
                fighter.CanAttack(fighters);
            }
        }

        public void RemoveDead()
        {
            _fighters.RemoveAll(fighter => fighter.Health <= 0);
        }

        public bool HasFighters() => _fighters.Count > 0;

        public void FillArmy()
        {
            int minimumNumberFighters = 3;
            int maximumNumberFighters = 5;
            int numberOfFighters = UserUtils.GenerateRandomNumbers(minimumNumberFighters, maximumNumberFighters);

            for (int i = 0; i < numberOfFighters; i++)
            {
                int randomIndex = UserUtils.GenerateRandomNumber(_fighterTypes.Count);
                Fighter fighter = _fighterTypes[randomIndex].Clone();
                _fighters.Add(fighter);
            }
        }

        private void InitializeFighterTypes()
        {
            _fighterTypes = new List<Fighter>
            {
                new OrdinaryFighter(),
                new DoubleDamageFighter(),
                new FighterSeveralUniqueOpponents(),
                new FighterSeveralOpponents()
            };
        }
    }

    public class OrdinaryFighter : Fighter
    {
        public OrdinaryFighter() : base(100, 10, "Обычный солдат без особенностей") { }

        public override Fighter Clone()
        {
            return new OrdinaryFighter();
        }

        public override bool CanAttack(List<Fighter> enemySoldiers)
        {
            return base.CanAttack(enemySoldiers);
        }
    }

    public class DoubleDamageFighter : Fighter
    {
        public DoubleDamageFighter() : base(50, 30, "Солдат с множителем урона") { }

        public override Fighter Clone()
        {
            return new DoubleDamageFighter();
        }

        public override bool CanAttack(List<Fighter> enemySoldiers)
        {
            int opponentIndex = UserUtils.GenerateRandomNumber(enemySoldiers.Count);
            Fighter opponent = enemySoldiers[opponentIndex];

            int twoDamage = 2;
            int damageDealt = GenerateRandomDamage() * twoDamage;
            int randomArmorPenetration = GenerateRandomDamage();
            int totalDamage = damageDealt + randomArmorPenetration;

            opponent.TakeDamage(damageDealt, randomArmorPenetration);
            Console.WriteLine($"\nНанесен урон {totalDamage}!\n");
            Console.WriteLine($"Состояние противника\nЗдоровье:{opponent.Health}\nБроня:{opponent.Armor}\n");
            Thread.Sleep(2000);

            if (opponent.Health <= 0)
            {
                opponent.RemoveFiter(enemySoldiers, opponent);
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    public class FighterSeveralUniqueOpponents : Fighter
    {
        public FighterSeveralUniqueOpponents() : base(70, 40, "Солдат с несколькими уникальными противниками") { }

        public override Fighter Clone()
        {
            return new FighterSeveralUniqueOpponents();
        }

        public override bool CanAttack(List<Fighter> enemySoldiers)
        {
            var targets = new HashSet<Fighter>();

            int randomDamage = GenerateRandomDamage();
            int randomArmorPenetration = GenerateRandomDamage();
            int totalDamage = randomDamage + randomArmorPenetration;
            int maximumTargets = 3;

            if (enemySoldiers.Count < maximumTargets)
            {
                maximumTargets = enemySoldiers.Count;
            }

            for (int i = 0; i < maximumTargets; i++)
            {
                var targetIndex = UserUtils.GenerateRandomNumber(enemySoldiers.Count);
                var target = enemySoldiers[targetIndex];

                if (targets.Add(target) == false)

                    i--;
            }

            foreach (var target in targets)
            {
                target.TakeDamage(randomDamage, randomArmorPenetration);
                Console.WriteLine($"\nНанесен урон {totalDamage}!\n");
                Console.WriteLine($"Состояние противника\nЗдоровье:{target.Health}\nБроня:{target.Armor}\n");
                Thread.Sleep(2000);

                if (target.Health <= 0)
                {
                    target.RemoveFiter(enemySoldiers, target);
                }
            }

            return targets.Count <= 0;
        }
    }

    public class FighterSeveralOpponents : Fighter
    {
        public FighterSeveralOpponents() : base(90, 20, "Солдат с несколькими противниками") { }

        public override Fighter Clone()
        {
            return new FighterSeveralOpponents();
        }

        public override bool CanAttack(List<Fighter> enemySoldiers)
        {
            int randomDamage = GenerateRandomDamage();
            int randomArmorPenetration = GenerateRandomDamage();

            bool isAnyEnemyDefeated = false;

            for (int i = enemySoldiers.Count - 1; i >= 0; i--)
            {
                var target = enemySoldiers[i];

                target.TakeDamage(randomDamage, randomArmorPenetration);
                Console.WriteLine($"\nНанесен урон {randomDamage}!\n");
                Console.WriteLine($"Состояние противника\nЗдоровье:{target.Health}\nБроня:{target.Armor}\n");
                Thread.Sleep(2000);

                if (target.Health <= 0)
                {
                    target.RemoveFiter(enemySoldiers, target);
                    isAnyEnemyDefeated = true;
                }
            }

            return isAnyEnemyDefeated;
        }
    }

    public class Fighter
    {
        public Fighter(int health, int armor, string name)
        {
            Damage = GenerateRandomDamage();
            Health = health;
            Armor = armor;
            Name = name;
        }

        public int Damage { get; private set; }
        public int Health { get; protected set; }
        public int Armor { get; private set; }
        public string Name { get; private set; }

        public virtual Fighter Clone()
        {
            return new Fighter(Health, Armor, Name);
        }

        public virtual bool CanAttack(List<Fighter> enemySoldiers)
        {
            int opponentIndex = UserUtils.GenerateRandomNumber(enemySoldiers.Count);
            Fighter opponent = enemySoldiers[opponentIndex];

            int randomDamageHealth = GenerateRandomDamage();
            int randomArmorPenetration = GenerateRandomDamage();
            int totalDamage = randomDamageHealth + randomArmorPenetration;

            opponent.TakeDamage(randomDamageHealth, randomArmorPenetration);
            Console.WriteLine($"\nНанесен урон {totalDamage}!\n");
            Console.WriteLine($"Состояние противника\nЗдоровье:{opponent.Health}\nБроня:{opponent.Armor}\n");
            Thread.Sleep(2000);

            return opponent.Health <= 0;
        }

        public void TakeDamage(int damageHealth, int armorPenetration)
        {
            Health -= damageHealth;
            Armor -= armorPenetration;
            int minimum = 0;

            if (Health < minimum)
            {
                Health = minimum;
            }

            if (Armor < minimum)
            {
                Armor = minimum;
            }
        }

        public void RemoveFiter(List<Fighter> enemySoldiers, Fighter opponent)
        {
            enemySoldiers.Remove(opponent);
        }

        protected virtual int GenerateRandomDamage()
        {
            int minDamage = 1;
            int maxDamage = 20;
            return UserUtils.GenerateRandomNumbers(minDamage, maxDamage + 1);
        }
    }

    public class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumbers(int min, int max)
        {
            return s_random.Next(min, max);
        }

        public static int GenerateRandomNumber(int number)
        {
            return s_random.Next(number);
        }
    }
}
